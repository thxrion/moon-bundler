import os
import re

REQUIRE_REGEX = re.compile("require\s*\(*\s*[\',\"](.+)[\',\"]\s*\)*")
EXTENSION_REGEX = re.compile("(.+)\.+(.+)")
REQUIRE_REPLACE_FORMAT = """(function() -- generated by lua bundler
   {0}
end)()
"""
FILE_NOT_FOUND_ERROR = "Ти бачиш файл? От і я не бачу."

def read_file(file_path):
  if not os.path.isfile(file_path):
    exit(FILE_NOT_FOUND_ERROR)
  stream = open(file_path, "r")
  file_content = stream.read()
  stream.close()
  return file_content

def write_file(file_path, text):
  stream = open(file_path, "w")
  stream.write(text)
  stream.close()

def get_require_statement_path(statement):
  match_result = REQUIRE_REGEX.match(statement[0])
  if match_result:
    return match_result[1]

def find_require_statement_referenced_module_location(statement):
  require_path = get_require_statement_path(statement).replace(".", "\\")
  for modifier in [".dll", ".lua", ".luac", "\init.lua", "\init.luac"]:
    full_path = require_path + modifier
    if os.path.exists(full_path):
      return full_path

def find_next_require_statement(lua_code):
  return REQUIRE_REGEX.search(lua_code)

def find_next_require_statement_referencing_module(lua_code):
  require_statement = find_next_require_statement(lua_code)
  if not require_statement:
    return
  require_module_location = find_require_statement_referenced_module_location(require_statement)
  if require_module_location:
    return require_statement
  return find_next_require_statement_referencing_module(lua_code[require_statement.span()[1]:])

def replace_require_statements_with_module_code(lua_code):
  require_statement = find_next_require_statement_referencing_module(lua_code)
  if not require_statement:
    return lua_code
  
  require_module_location = find_require_statement_referenced_module_location(require_statement)
  module_code = read_file(require_module_location)
  module_code_formated = REQUIRE_REPLACE_FORMAT.format(module_code)
  return replace_require_statements_with_module_code(lua_code.replace(require_statement[0], module_code_formated))
  

def make_bundle(index_file_path):
  lua_code = read_file(index_file_path)
  bundle_code = replace_require_statements_with_module_code(lua_code)

  match_result = EXTENSION_REGEX.match(index_file_path)
  if not match_result:
    return
  bundle_file_path = "{0}-bundle.{1}".format(match_result[1], match_result[2])
  write_file(bundle_file_path, bundle_code)

make_bundle("init.lua")